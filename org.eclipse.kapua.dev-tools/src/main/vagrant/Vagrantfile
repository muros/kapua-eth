# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  #share the kapua directory with the vagrant machine to allow the activemq broker to access to the kapua code (jars)
  config.vm.synced_folder "../../../../", "/kapua",
     owner: "vagrant",
     group: "vagrant",
     mount_options: ["dmode=775,fmode=664"]

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.

  # dbms
  config.vm.network "forwarded_port", guest: 3306, host: 3306
  #activemq
  config.vm.network "forwarded_port", guest: 1883, host: 1883
  config.vm.network "forwarded_port", guest: 8883, host: 8883
  config.vm.network "forwarded_port", guest: 5005, host: 5005
  #elasticsearch
  config.vm.network "forwarded_port", guest: 9300, host: 9300
  config.vm.network "forwarded_port", guest: 9200, host: 9200
  #tomcat
  config.vm.network "forwarded_port", guest: 8080, host: 8080
  config.vm.network "forwarded_port", guest: 8443, host: 8443
  config.vm.network "forwarded_port", guest: 8000, host: 8000


  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
  
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
  export DEBIAN_FRONTEND=noninteractive

     # update
     sudo apt-get update -y

	 ### install oracle jdk 8 ###
     sudo add-apt-repository -y ppa:webupd8team/java
     sudo apt-get update
     echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
     echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections
     sudo apt-get -y install -qq oracle-java8-installer

     ### Install H2 database ###
     sudo mkdir -p /usr/local/h2database/h2database-1.4.192
     sudo mkdir -p /home/vagrant/H2/kapua
	 sudo wget http://repo2.maven.org/maven2/com/h2database/h2/1.4.192/h2-1.4.192.jar -P /usr/local/h2database/h2database-1.4.192
     sudo chown -R vagrant /usr/local/h2database/h2database-1.4.192
     sudo chown -R vagrant /home/vagrant/H2/kapua
	 
     # H2 database post-install setup
     # Run the database engine
     su --login -c "java -cp /usr/local/h2database/h2database-1.4.192/h2*.jar org.h2.tools.Server -baseDir /home/vagrant/H2/kapua -webAllowOthers -tcpAllowOthers -tcpPort 3306 &" vagrant
	 
	 # Create the initial database
	 java -cp /usr/local/h2database/h2database-1.4.192/h2*.jar org.h2.tools.Shell -url jdbc:h2:tcp://localhost:3306/kapuadb -user "root" -password "password" -sql "CREATE SCHEMA IF NOT EXISTS kapuadb; \
	 	CREATE USER IF NOT EXISTS kapua PASSWORD 'kapua'; \
	 	GRANT ALL ON SCHEMA kapuadb TO kapua;"

     ### install activemq ###
	 sudo mkdir -p /usr/local/activemq
     sudo wget http://archive.apache.org/dist/activemq/5.11.0/apache-activemq-5.11.0-bin.tar.gz -P /usr/local/activemq
     cd /usr/local/activemq
     sudo tar zxvf apache-activemq-5.11.0-bin.tar.gz
     sudo rm apache-activemq-5.11.0-bin.tar.gz

     # configure activemq
     # Kapua jars and activemq.xml need to be added before starting the activemq instance...
	   # config file
	   cd apache-activemq-5.11.0
	   rm conf/activemq.xml
	   rm conf/log4j.properties
	   ln -s /kapua/org.eclipse.kapua.broker.deployment/src/main/resources/conf/activemq.xml conf/activemq.xml
	   ln -s /kapua/org.eclipse.kapua.broker.deployment/src/main/resources/conf/log4j.properties conf/log4j.properties
     cp /kapua/org.eclipse.kapua.dev-tools/src/main/vagrant/*.sh .
     chmod 555 update_kapua_jars.sh
     chmod 555 start_broker.sh
     echo 'remove old guava jars'
     rm ./lib/optional/guava-*.*
     # enable debug
     sed -i 's/\#ACTIVEMQ_DEBUG_OPTS=/ACTIVEMQ_DEBUG_OPTS=/g' bin/env
     
     # activemq post-install setup
     # change the owner and the group of activemq to vagrant
     sudo chown -R vagrant ../apache-activemq-5.11.0
     sudo chgrp -R vagrant ../apache-activemq-5.11.0

     #database seeding (and create schema)
     # echo 'seedind database'
     # for name in $(find /kapua -name '*_drop.sql' | grep -Ev 'test|console|api'); do echo invoke drop sql script ${name}; mysql -u root -ppassword 'kapuadb' < ${name}; done;
     # for name in $(find /kapua -name '*_create.sql' | grep -Ev 'test|console|api'); do echo invoke create sql script ${name}; mysql -u root -ppassword 'kapuadb' < ${name}; done;
     # for name in $(find /kapua -name '*_seed.sql' | grep -Ev 'test|console|api'); do echo invoke seed sql script ${name}; mysql -u root -ppassword 'kapuadb' < ${name}; done;

     ### install Elasticsearch ###
     sudo mkdir -p /usr/local/elasticsearch
     sudo wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.4/elasticsearch-2.3.4.tar.gz -P /usr/local/elasticsearch
     cd /usr/local/elasticsearch
     sudo tar -xvf elasticsearch-2.3.4.tar.gz
     sudo chown -R vagrant elasticsearch-2.3.4
     sudo rm elasticsearch-2.3.4.tar.gz

     # elasticsearch post-install setup
     
     cd /usr/local/elasticsearch/elasticsearch-2.3.4/config
     echo "" >> elasticsearch.yml
     echo "#---------------------------" >> elasticsearch.yml
     echo "network.host: 0.0.0.0" >> elasticsearch.yml
     echo "#---------------------------" >> elasticsearch.yml
     echo "" >> elasticsearch.yml
     
     # Elasticsearch 2.3.4 post install
     su --login -c "/usr/local/elasticsearch/elasticsearch-2.3.4/bin/elasticsearch -d --cluster.name kapua-datastore" vagrant

     ### install tomcat8 ###
     sudo mkdir -p /usr/local/tomcat
     sudo wget http://it.apache.contactlab.it/tomcat/tomcat-8/v8.5.4/bin/apache-tomcat-8.5.4.tar.gz -P /usr/local/tomcat
     cd /usr/local/tomcat
     sudo tar zxvf apache-tomcat-8.5.4.tar.gz
     sudo chown -R vagrant apache-tomcat-8.5.4
     sudo rm apache-tomcat-8.5.4.tar.gz

     # tomcat 8.5.4 post install
     su --login -c "/usr/local/tomcat/apache-tomcat-8.5.4/bin/startup.sh" vagrant
     

  SHELL
end
