<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) 2011, 2016 Eurotech and/or its affiliates and others
   
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        Eurotech - initial API and implementation
   
 -->

<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://activemq.apache.org/schema/core
         http://activemq.apache.org/schema/core/activemq-core.xsd
         http://camel.apache.org/schema/spring
         http://camel.apache.org/schema/spring/camel-spring-2.15.1.xsd
         http://www.springframework.org/schema/util
         http://www.springframework.org/schema/util/spring-util-3.2.xsd">

<!-- ========================================================================= -->
<!-- JMS CAMEL BRIDGE SECTION -->
<!-- ========================================================================= -->

<!-- ============================================================== -->
<!--                     TEST CODE                                  -->
<!-- ============================================================== -->
	<!-- ==============================================================
			AMQP CLIENT AND CONNECTION POOL TEST
	 ==============================================================  -->

	<!-- spring connection pool -->
	<!--
	<bean id="amqp" class="org.apache.camel.component.amqp.AMQPComponent">
		<property name="connectionFactory" ref="cachingConnectionFactory" />
		<property name="cacheLevel" value="2" />
	</bean>
	<bean id="cachingConnectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="amqRemoteConnectionFactory" />
	</bean>
	<bean id="amqRemoteConnectionFactory" class="org.apache.qpid.client.AMQConnectionFactory">
		<constructor-arg value="amqp://admin:admin@localhost:6000/forwardedTopic?brokerlist='localhost:6000'" />
	</bean>
	-->

	<!-- rough client -->
	<!--
	<bean id="amqp" class="org.apache.camel.component.amqp.AMQPComponent">
       <property name="connectionFactory">
         <bean class="org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl" factory-method="createFromURL">
           <constructor-arg index="0" type="java.lang.String" value="amqp://guest:guest@localhost:6000/forwardedTopic" />
         </bean>
       </property>
	</bean>
	 -->

	<!-- Pooled connection factory -->
	<!--
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
		init-method="start" destroy-method="stop">
		<property name="maxConnections" value="10" />
		<property name="maximumActiveSessionPerConnection" value="10" />
		<property name="connectionFactory" ref="amqp_connection" />
	</bean>
	-->

	<!-- ==============================================================
			!!!AMQP CLIENT AND CONNECTION POOL WORKING!!!
	 ==============================================================  -->
	<!-- WORKING CONNECTION POOLING with A-MQ 6.2.1 (camel 2.15.1-red-hat) to fuse 6.2.1 (camel 2.15.1-red-hat).
	<bean id="myConnectionFactory" class="org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl" factory-method="createFromURL">
			<constructor-arg index="0" type="java.lang.String" value="amqp://guest:guest@localhost:6000/forwardedTopic" />
	</bean>

	<bean id="cachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="myConnectionFactory"/>
		<property name="sessionCacheSize" value="10" /> it's the maximum number of caches sessions
    </bean>
    <bean id="amqp" class="org.apache.camel.component.amqp.AMQPComponent">
		<property name="connectionFactory" ref="cachingConnectionFactory"/>
		<property name="cacheLevel" value="2"/>
    </bean>

	<to uri="amqp:queue:forwardedTopic" />

	-->

	<!-- ==============================================================
			KAFKA ENDPOINT
	==============================================================  -->
	<!--
	from http://camel.apache.org/kafka.html

	from("direct:start").process(new Processor() {
		    @Override
		    public void process(Exchange exchange) throws Exception {
		        exchange.getIn().setBody("Test Message from Camel Kafka Component Final",String.class);
		        exchange.getIn().setHeader(KafkaConstants.PARTITION_KEY, 0);
		        exchange.getIn().setHeader(KafkaConstants.KEY, "1");
		    }
		}).to("kafka:localhost:9092?topic=test");
	with spring beans:

	<bean ref="processorKafkaHeaderSetter" />
	<recipientList>
		<header>kafkaDestination</header>
	</recipientList>

	or without processor:

	<setHeader headerName="topicCleaned">
		<simple resultType="java.lang.String">${header.JMSDestination.toString().substring(21, ${header.JMSDestination.toString().length()-1})}</simple>
	</setHeader>
	<setHeader headerName="kafkaDestination">
		<simple resultType="java.lang.String">kafka:localhost:9092?serializerClass=kafka.serializer.StringEncoder&amp;topic=${header.topicCleaned}</simple>
	</setHeader>
	<recipientList>
		<header>kafkaDestination</header>
	</recipientList>
	-->

	<!-- ==============================================================
            JDBC CONNECTION
     ==============================================================  -->
    <!--
    <bean id="kapuaDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/kapuadb"/>
        <property name="username" value="kapua"/>
        <property name="password" value="Welcome1"/>
    </bean>
    -->

    <!-- ==============================================================
            JDBC CONNECTION POOL
     ==============================================================  -->
    <!--
    <bean id="springDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/kapuadb"/>
        <property name="username" value="kapua"/>
        <property name="password" value="Welcome1"/>
        <property name="removeAbandoned" value="true"/>
        <property name="initialSize" value="20" />
        <property name="maxActive" value="30" />
    </bean>
    -->

    <!-- ENABLE MULTITHREAD
        add after the from tag
        <threads executorServiceRef="executorServiceManager">
        due to our use case with the concurrentConsumers we have already multithread. We use it only for the endpoint processors
    -->

	<!-- ==============================================================
			AMQ CONNECTION POOL
	 ==============================================================  -->
	<!-- Configure the ActiveMQ broker connection -->
	<!-- we can use also the tcp regular connection. it should be no performance difference! -->
	<bean id="kapuaConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="vm://kapua?create=false" />
	</bean>

	<bean id="cachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="kapuaConnectionFactory" />
	</bean>

	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
		<property name="connectionFactory" ref="cachingConnectionFactory" />
		<!-- we can remove this setting because is overwritten by the concurrent consumer on jms route -->
		<property name="concurrentConsumers" value="10" />
		<property name="cacheLevelName" value="CACHE_CONSUMER" />
	</bean>

	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="configuration" ref="jmsConfig" />
	</bean>
    <!--  create connection pooling!!! -->

	<!-- session filers (to bind Kapua and Shiro thread context) -->
	<bean id="kapuaCamelFilter" class="org.eclipse.kapua.broker.core.converter.KapuaCamelFilter" >
	</bean>

	<!-- Converter -->
	<bean id="kapuaConverter" class="org.eclipse.kapua.broker.core.converter.KapuaConverter" />

	<!-- Consumer -->
	<!-- ASSISTANTS -->
	<bean id="deviceMessageListener" class="org.eclipse.kapua.broker.core.listener.DeviceMessageListener" >
	</bean>
	<!-- ERROR -->
	<bean id="errorMessageListener" class="org.eclipse.kapua.broker.core.listener.ErrorMessageListener" >
	</bean>

	<camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring" >
	    <!-- the beans are defined as spring bean so check if it's possible to remove the package scan at all. Remove also the endpoint annotation from the pojo endpoints and all should works. -->
		<packageScan>
		  <package>org.ecplise.kapua</package>
		  <excludes>**.*Excluded*</excludes>
		  <includes>**.*</includes>
		</packageScan>
        <!-- exception/error handler -->
        	<!--
        	by default the errorHandler forward the message to a dead letter queue but in that way we lose the failure end point
        	deadLetterUri="activemq:queue:processedMessageWithError"
        	if we forward the message directly to an end point with the exchange in the signature
        	deadLetterUri="bean:errorMessagePojo?method=processMessage"
        	we have these properties evaluated (in the exchange field)
        	CamelFailureRouteId
        	CamelFailureEndpoint
        	CamelExceptionCaught
        	(others useful fields CamelMulticastIndex - CamelMessageHistory - CamelCreatedTimestamp)
        	-->
        <errorHandler id="mainRouteMessageErrorHandler"
            type="DeadLetterChannel"
            deadLetterUri="bean:errorMessageListener?method=processMessage"
            useOriginalMessage="true">
            <redeliveryPolicy maximumRedeliveries="1" />
        </errorHandler>

		<!-- Executor thread pool
		Please check the KapuaExecutorThreadPoolFactory comments before modify the threadName attributes
		-->
        <threadPool id="serviceThreads"
                threadName="kapuaExecutorPoolServiceProcessor"
                poolSize="3"
                maxPoolSize="5"
                maxQueueSize="2" />
        <!--
        For the transaction/acknowledge mode please follow http://stackoverflow.com/questions/13498652/camel-jms-client-acknowledge-mode

        Camel uses spring MessageListenerContainers.
        The AbstractMessageListenerContainer, in case of CLIENT_AKNOWLEDGE mode, invokes comitIfNecessary method acknowledging message.
        This happens only AFTER registered MessageListener processes message successfully (no exceptions)

        Camel uses EndpointMessageListener which, eventually, invokes process method of next processor (or Producer) down the route.
        As this is classic chain of responsibilities, if any processor down the route throws exception or sets exception on the Exchange,
        it will be re-thrown by EndpointMessageListener preventing the AbstractMessageListener to acknowledge message.

        So the camel-jms connections CONFIGURATION TESTED are:
        acknowledgementModeName=CLIENT_ACKNOWLEDGE
        transacted=false
        -->
		<route errorHandlerRef="mainRouteMessageErrorHandler" >
			<from uri="activemq:queue:Consumer.eurotech:mainRoutelisteners:EXACTLY_ONCE.VirtualTopic.>?asyncConsumer=false&amp;acknowledgementModeName=CLIENT_ACKNOWLEDGE&amp;transacted=false&amp;concurrentConsumers=10&amp;maxConcurrentConsumers=10" />
			<pipeline>
				<bean ref="kapuaCamelFilter" method="bindSession" />
	            <choice id="choice">
					<when id="systemMessageFilter">
						<simple>${header.originalTopic} regex '^\$EDC\..*'</simple>
						<choice id="choice">
							<when id="birthMessageFilter">
								<simple>${header.originalTopic} regex '^\$EDC\.(.*\.){2}MQTT\.BIRTH'</simple>
								<bean ref="kapuaConverter" method="convertToBirth"/>
								<to uri="bean:deviceMessageListener?method=processBirthMessage" />
							</when>
							<when id="disconnectMessageFilter">
								<simple>${header.originalTopic} regex '^\$EDC\.(.*\.){2}MQTT\.DC'</simple>
								<bean ref="kapuaConverter" method="convertToDisconnect"/>
								<to uri="bean:deviceMessageListener?method=processDisconnectMessage" />
							</when>
							<when id="appsMessageFilter">
								<simple>${header.originalTopic} regex '^\$EDC\.(.*\.){2}MQTT\.APPS'</simple>
								<bean ref="kapuaConverter" method="convertToApps"/>
								<to uri="bean:deviceMessageListener?method=processAppsMessage" />
							</when>
							<when id="missingMessageFilter">
								<simple>${header.originalTopic} regex '^\$EDC\.(.*\.){2}MQTT\.MISSING'</simple>
								<bean ref="kapuaConverter" method="convertToMissing"/>
								<to uri="bean:deviceMessageListener?method=processMissingMessage" />
							</when>
							<otherwise>
								<bean ref="kapuaConverter" method="convertToData"/>
								<to uri="bean:errorMessageListener?method=unmatchedMessage" />
							</otherwise>
						</choice>
					</when>
		            <!-- otherwise data messages -->
					<otherwise>
						<bean ref="kapuaConverter" method="convertToData"/>
						<to uri="bean:errorMessageListener?method=unmatchedMessage" />
					</otherwise>
	            </choice>
	            <bean ref="kapuaCamelFilter" method="unbindSession" />
            </pipeline>
	   </route>
	</camelContext>

<!-- ========================================================================= -->
<!-- ACTIVEMQ BROKER SECTION -->
<!-- ========================================================================= -->

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.conf}/credentials.properties</value>
        </property>
    </bean>

    <broker xmlns="http://activemq.apache.org/schema/core"
            brokerName="kapua"
            persistent="true"
            dataDirectory="${activemq.data}"
            schedulePeriodForDestinationPurge="-1"
            networkConnectorStartAsync="true"
            start="false" restartAllowed="false" useJmx="false" advisorySupport="false">

        <destinationPolicy>
            <policyMap>
                <policyEntries>
                    <policyEntry topic=">"
                                 producerFlowControl="true"
                                 durableTopicPrefetch="32766"
                                 topicPrefetch="32766"
                                 expireMessagesPeriod="300000"
                                 enableAudit="false"
                                 minimumMessageSize="256"
                                 advisoryForSlowConsumers="true"
                                 advisoryForFastProducers="true"
                                 advisoryWhenFull="true"
                                 advisoryForDiscardingMessages="true"
                                 gcInactiveDestinations="true"
                                 inactiveTimeoutBeforeGC="300000">
                        <pendingSubscriberPolicy>
                            <vmCursor />
                        </pendingSubscriberPolicy>
                        <!--
                            Limit of messages sent to the consumer but not yet acknoledged.
                            The settings is per consumer so setting it to 1000.
                            http://activemq.apache.org/slow-consumer-handling.html
                        -->
                        <pendingMessageLimitStrategy>
                            <constantPendingMessageLimitStrategy limit="1000"/>
                        </pendingMessageLimitStrategy>
                        <subscriptionRecoveryPolicy>
                            <noSubscriptionRecoveryPolicy/>
                        </subscriptionRecoveryPolicy>
                        <deadLetterStrategy>
                            <sharedDeadLetterStrategy processExpired="false" />
                        </deadLetterStrategy>
                    </policyEntry>

                    <!--
                        queuePrefetch: if you have just a single consumer attached to a queue, you can leave the prefetch limit at a fairly large value.
                        But if you are using a group of consumers to distribute the workload, it is usually better to restrict the prefetch limit to
                        a very small number—for example, 0 or 1.
                        http://activemq.apache.org/per-destination-policies.html
                        Restest with default prefetch of 1000. Is it better than 2?
                    -->
                    <policyEntry queue=">"
                                 producerFlowControl="true"
                                 optimizedDispatch="true"
                                 queuePrefetch="2"
                                 expireMessagesPeriod="300000"
                                 enableAudit="false"
                                 useConsumerPriority="false"
                                 minimumMessageSize="256"
                                 advisoryForSlowConsumers="true"
                                 advisoryForFastProducers="true"
                                 advisoryWhenFull="true"
                                 gcInactiveDestinations="true"
                                 inactiveTimeoutBeforeGC="300000">
                        <pendingSubscriberPolicy>
                            <vmCursor />
                        </pendingSubscriberPolicy>
                        <deadLetterStrategy>
                            <sharedDeadLetterStrategy processExpired="false" />
                        </deadLetterStrategy>
                    </policyEntry>
                </policyEntries>
            </policyMap>
        </destinationPolicy>

        <!-- commented to remove all jmx management -->
        <!--
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>
        -->

        <persistenceAdapter>
            <!--
                indexCacheSize—(default 10000) specifies the size of the cache in units of pages (where one page is 4 KB by default).
                https://access.redhat.com/documentation/en-US/Fuse_ESB_Enterprise/7.1/html/ActiveMQ_Tuning_Guide/files/PersTuning-KahaDB.html
            -->
            <kahaDB directory="${activemq.data}/kahadb"
                    journalMaxFileLength="32mb"
                    concurrentStoreAndDispatchQueues="true"
                    concurrentStoreAndDispatchTopics="false"
                    indexWriteBatchSize="10000"
                    indexCacheSize="100000"
                    enableJournalDiskSyncs="false"/>
        </persistenceAdapter>

        <plugins>
            <bean xmlns="http://www.springframework.org/schema/beans"
                    id="kapuaBrokerPlugin"
                    class="org.eclipse.kapua.broker.core.KapuaBrokerSecurityPlugin" />
            <discardingDLQBrokerPlugin dropAll="true"
                                       dropTemporaryTopics="true"
                                       dropTemporaryQueues="true" />
        </plugins>


        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="6 gb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="10 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="1 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!--
        <sslContext>
            <sslContext keyStore="${certificatesHome}/kapua.ks" keyStorePassword="${keystorePassword}"/>
        </sslContext>
        -->

        <transportConnectors>
            <transportConnector name="mqtt"  uri="mqtt+nio://0.0.0.0:1883?transport.maximumConnections=1000&amp;transport.socketBufferSize=131072&amp;transport.ioBufferSize=16384&amp;transport.activeMQSubscriptionPrefetch=32766&amp;transport.publishDollarTopics=true&amp;transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>
            <transportConnector name="mqtts" uri="mqtt+nio+ssl://0.0.0.0:8883?transport.maximumConnections=1000&amp;transport.socketBufferSize=131072&amp;transport.ioBufferSize=16384&amp;transport.activeMQSubscriptionPrefetch=32766&amp;transport.publishDollarTopics=true&amp;transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>
            <transportConnector name="tcp"   uri="tcp://0.0.0.0:61616?transport.maximumConnections=1000&amp;transport.socketBufferSize=131072&amp;ioBufferSize=16384&amp;transport.activeMQSubscriptionPrefetch=32766&amp;transport.publishDollarTopics=true&amp;transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>
        </transportConnectors>
    </broker>
</beans>
